// vite.config.ts
import { defineConfig, loadEnv } from "file:///mnt/d/Coding/React/inexperto/node_modules/vite/dist/node/index.js";
import react from "file:///mnt/d/Coding/React/inexperto/node_modules/@vitejs/plugin-react-swc/index.mjs";
import EnvironmentPlugin from "file:///mnt/d/Coding/React/inexperto/node_modules/vite-plugin-environment/dist/index.js";

// dfx.config.ts
import * as fs from "fs";
var localCanisters;
var prodCanisters;
var canisters;
var initCanisterIds = (dfxNetowrk, mode) => {
  try {
    localCanisters = JSON.parse(fs.readFileSync(".dfx/local/canister_ids.json", { encoding: "utf8" }));
  } catch (error) {
    console.log("No local canister_ids.json found. Continuing production");
  }
  try {
    prodCanisters = JSON.parse(fs.readFileSync("canister_ids.json", { encoding: "utf8" }));
  } catch (error) {
    console.log("No production canister_ids.json found. Continuing with local");
  }
  const network = dfxNetowrk || (mode === "production" ? "ic" : "local");
  console.info(`initCanisterIds: network=${network}`);
  console.info(`initCanisterIds: DFX_NETWORK=${dfxNetowrk}`);
  canisters = network === "local" ? localCanisters : prodCanisters;
  const canisterID = [];
  for (const canister in canisters) {
    canisterID.push(canister.toUpperCase());
    canisterID.push(canisters[canister][network]);
  }
  return canisterID;
};

// vite.config.ts
var vite_config_default = ({ mode }) => {
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };
  const canisterID = initCanisterIds(process.env.VITE_DFX_NETWORK, mode);
  for (let i = 0; i < canisterID.length; i++) {
    const name = canisterID[i].toUpperCase();
    i++;
    const id = canisterID[i];
    process.env[`VITE_${name}_CANISTER_ID`] = id;
    console.log(id, name);
  }
  return defineConfig({
    plugins: [
      EnvironmentPlugin({ VITE_DFX_NETWORK: "local" }),
      react()
    ]
  });
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAiZGZ4LmNvbmZpZy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9tbnQvZC9Db2RpbmcvUmVhY3QvaW5leHBlcnRvXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvbW50L2QvQ29kaW5nL1JlYWN0L2luZXhwZXJ0by92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vbW50L2QvQ29kaW5nL1JlYWN0L2luZXhwZXJ0by92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZywgbG9hZEVudiB9IGZyb20gJ3ZpdGUnXHJcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2MnXHJcbmltcG9ydCBFbnZpcm9ubWVudFBsdWdpbiBmcm9tIFwidml0ZS1wbHVnaW4tZW52aXJvbm1lbnRcIjtcclxuLy9AdHMtaWdub3JlXHJcbmltcG9ydCB7IGluaXRDYW5pc3RlcklkcyB9IGZyb20gXCIuL2RmeC5jb25maWdcIlxyXG5cclxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cclxuZXhwb3J0IGRlZmF1bHQgKHttb2RlfSkgPT4ge1xyXG4gIHByb2Nlc3MuZW52ID0gey4uLnByb2Nlc3MuZW52LCAuLi5sb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCkpfTtcclxuICBjb25zdCBjYW5pc3RlcklEID0gaW5pdENhbmlzdGVySWRzKHByb2Nlc3MuZW52LlZJVEVfREZYX05FVFdPUkssIG1vZGUpXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5pc3RlcklELmxlbmd0aDsgaSsrKXtcclxuICAgIGNvbnN0IG5hbWUgPSBjYW5pc3RlcklEW2ldLnRvVXBwZXJDYXNlKCk7XHJcbiAgICBpKys7XHJcbiAgICBjb25zdCBpZCA9IGNhbmlzdGVySURbaV1cclxuICAgIHByb2Nlc3MuZW52W2BWSVRFXyR7bmFtZX1fQ0FOSVNURVJfSURgXSA9IGlkO1xyXG4gICAgY29uc29sZS5sb2coaWQsIG5hbWUpXHJcbiAgfVxyXG4gIHJldHVybiBkZWZpbmVDb25maWcoe1xyXG4gICAgcGx1Z2luczogW1xyXG4gICAgICBFbnZpcm9ubWVudFBsdWdpbih7VklURV9ERlhfTkVUV09SSzogXCJsb2NhbFwifSksXHJcbiAgICAgIHJlYWN0KClcclxuICAgIF0sXHJcbiAgfSlcclxufVxyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9tbnQvZC9Db2RpbmcvUmVhY3QvaW5leHBlcnRvXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvbW50L2QvQ29kaW5nL1JlYWN0L2luZXhwZXJ0by9kZnguY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9tbnQvZC9Db2RpbmcvUmVhY3QvaW5leHBlcnRvL2RmeC5jb25maWcudHNcIjtpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcblxyXG5sZXQgbG9jYWxDYW5pc3RlcnMsIHByb2RDYW5pc3RlcnMsIGNhbmlzdGVyc1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRDYW5pc3RlcklkcyA9IChkZnhOZXRvd3JrOiBzdHJpbmcsIG1vZGU6IFN0cmluZykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBsb2NhbENhbmlzdGVycyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKFwiLmRmeC9sb2NhbC9jYW5pc3Rlcl9pZHMuanNvblwiLCB7ZW5jb2Rpbmc6IFwidXRmOFwifSkpXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTm8gbG9jYWwgY2FuaXN0ZXJfaWRzLmpzb24gZm91bmQuIENvbnRpbnVpbmcgcHJvZHVjdGlvblwiKVxyXG4gIH1cclxuICB0cnkge1xyXG4gICAgcHJvZENhbmlzdGVycyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKFwiY2FuaXN0ZXJfaWRzLmpzb25cIiwge2VuY29kaW5nOiBcInV0ZjhcIn0pKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk5vIHByb2R1Y3Rpb24gY2FuaXN0ZXJfaWRzLmpzb24gZm91bmQuIENvbnRpbnVpbmcgd2l0aCBsb2NhbFwiKVxyXG4gIH1cclxuICBcclxuICAvLyBjb25zdCBuZXR3b3JrID1cclxuICAvLyBwcm9jZXNzLmVudi5WSVRFX0RGWF9ORVRXT1JLIHx8XHJcbiAgLy8gKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IFwiaWNcIiA6IFwibG9jYWxcIilcclxuXHJcbiAgY29uc3QgbmV0d29yayA9XHJcbiAgZGZ4TmV0b3dyayB8fFxyXG4gIChtb2RlID09PSBcInByb2R1Y3Rpb25cIiA/IFwiaWNcIiA6IFwibG9jYWxcIilcclxuICBcclxuICBjb25zb2xlLmluZm8oYGluaXRDYW5pc3RlcklkczogbmV0d29yaz0ke25ldHdvcmt9YClcclxuICAvLyBjb25zb2xlLmluZm8oYGluaXRDYW5pc3RlcklkczogREZYX05FVFdPUks9JHtwcm9jZXNzLmVudi5ERlhfTkVUV09SS31gKVxyXG4gIGNvbnNvbGUuaW5mbyhgaW5pdENhbmlzdGVySWRzOiBERlhfTkVUV09SSz0ke2RmeE5ldG93cmt9YClcclxuICBcclxuICBjYW5pc3RlcnMgPSBuZXR3b3JrID09PSBcImxvY2FsXCIgPyBsb2NhbENhbmlzdGVycyA6IHByb2RDYW5pc3RlcnNcclxuICAvLyBmb3IgKGNvbnN0IGNhbmlzdGVyIGluIGNhbmlzdGVycykge1xyXG4gIC8vICAgcHJvY2Vzcy5lbnZbYFZJVEVfUFVCTElDXyR7Y2FuaXN0ZXIudG9VcHBlckNhc2UoKX1fQ0FOSVNURVJfSURgXSA9XHJcbiAgLy8gICBjYW5pc3RlcnNbY2FuaXN0ZXJdW25ldHdvcmtdXHJcbiAgLy8gfVxyXG4gIGNvbnN0IGNhbmlzdGVySUQgPSBbXVxyXG4gIGZvciAoY29uc3QgY2FuaXN0ZXIgaW4gY2FuaXN0ZXJzKSB7XHJcbiAgICBjYW5pc3RlcklELnB1c2goY2FuaXN0ZXIudG9VcHBlckNhc2UoKSlcclxuICAgIGNhbmlzdGVySUQucHVzaChjYW5pc3RlcnNbY2FuaXN0ZXJdW25ldHdvcmtdKVxyXG4gIH1cclxuICByZXR1cm4gY2FuaXN0ZXJJRFxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVEsU0FBUyxjQUFjLGVBQWU7QUFDL1MsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sdUJBQXVCOzs7QUNGeU8sWUFBWSxRQUFRO0FBRTNSLElBQUk7QUFBSixJQUFvQjtBQUFwQixJQUFtQztBQUU1QixJQUFNLGtCQUFrQixDQUFDLFlBQW9CLFNBQWlCO0FBQ25FLE1BQUk7QUFDRixxQkFBaUIsS0FBSyxNQUFTLGdCQUFhLGdDQUFnQyxFQUFDLFVBQVUsT0FBTSxDQUFDLENBQUM7QUFBQSxFQUNqRyxTQUFTLE9BQVA7QUFDQSxZQUFRLElBQUkseURBQXlEO0FBQUEsRUFDdkU7QUFDQSxNQUFJO0FBQ0Ysb0JBQWdCLEtBQUssTUFBUyxnQkFBYSxxQkFBcUIsRUFBQyxVQUFVLE9BQU0sQ0FBQyxDQUFDO0FBQUEsRUFDckYsU0FBUyxPQUFQO0FBQ0EsWUFBUSxJQUFJLDhEQUE4RDtBQUFBLEVBQzVFO0FBTUEsUUFBTSxVQUNOLGVBQ0MsU0FBUyxlQUFlLE9BQU87QUFFaEMsVUFBUSxLQUFLLDRCQUE0QixTQUFTO0FBRWxELFVBQVEsS0FBSyxnQ0FBZ0MsWUFBWTtBQUV6RCxjQUFZLFlBQVksVUFBVSxpQkFBaUI7QUFLbkQsUUFBTSxhQUFhLENBQUM7QUFDcEIsYUFBVyxZQUFZLFdBQVc7QUFDaEMsZUFBVyxLQUFLLFNBQVMsWUFBWSxDQUFDO0FBQ3RDLGVBQVcsS0FBSyxVQUFVLFFBQVEsRUFBRSxPQUFPLENBQUM7QUFBQSxFQUM5QztBQUNBLFNBQU87QUFDVDs7O0FEaENBLElBQU8sc0JBQVEsQ0FBQyxFQUFDLEtBQUksTUFBTTtBQUN6QixVQUFRLE1BQU0sRUFBQyxHQUFHLFFBQVEsS0FBSyxHQUFHLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxFQUFDO0FBQzlELFFBQU0sYUFBYSxnQkFBZ0IsUUFBUSxJQUFJLGtCQUFrQixJQUFJO0FBQ3JFLFdBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUk7QUFDekMsVUFBTSxPQUFPLFdBQVcsQ0FBQyxFQUFFLFlBQVk7QUFDdkM7QUFDQSxVQUFNLEtBQUssV0FBVyxDQUFDO0FBQ3ZCLFlBQVEsSUFBSSxRQUFRLGtCQUFrQixJQUFJO0FBQzFDLFlBQVEsSUFBSSxJQUFJLElBQUk7QUFBQSxFQUN0QjtBQUNBLFNBQU8sYUFBYTtBQUFBLElBQ2xCLFNBQVM7QUFBQSxNQUNQLGtCQUFrQixFQUFDLGtCQUFrQixRQUFPLENBQUM7QUFBQSxNQUM3QyxNQUFNO0FBQUEsSUFDUjtBQUFBLEVBQ0YsQ0FBQztBQUNIOyIsCiAgIm5hbWVzIjogW10KfQo=
